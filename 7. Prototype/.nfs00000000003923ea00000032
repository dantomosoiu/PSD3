#!/bin/bash
#PSD3 Prototype for Internship Management System
#Version 1.0

#ToImplement - New Username verification, Some Option Processing

function login() {

exit=0
quit=0

while [[ ! $exit -eq 1 ]];
do 

	#get username
	echo -n "Enter username; q to quit: "
	read username
	if [ "$username" = "q" ]; then quit=1
	break; fi
	#get password
	echo -n "Enter password: "
	read -s password
	echo
	
	#check credentials
	while read line           
	do           
		re="^([^,]+), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*)$"
		[[ "$line" =~ $re ]] && Username="${BASH_REMATCH[1]}" && Password="${BASH_REMATCH[2]}" && Email="${BASH_REMATCH[3]}" && IsApproved="${BASH_REMATCH[4]}" && AccountType="${BASH_REMATCH[5]}" && FirstName="${BASH_REMATCH[6]}" && LastName="${BASH_REMATCH[7]}" && StudentType="${BASH_REMATCH[8]}" && StudentYear="${BASH_REMATCH[9]}" && OrganisationType="${BASH_REMATCH[10]}"
		if [[ "$username" = "$Username" && "$AccountType" != "AccountType" ]]; then
			if [ "$password" = "$Password" ]; then
				exit=1
				echo -e "\nLogin Successful. Welcome $FirstName"
			else echo -e "Incorrent Password\n"
			fi
			break
		fi
	done <.users.csv
	if [ "$username" != "$Username" ]; then echo -e "Incorrent Username\n"; fi
	done

}


function menu() {
	echo -e "\nPlease choose an option from the menu below by entering the appropriate number and pressing enter. q to exit:"

	if [[ "$AccountType" = "student" ]]; then
		echo "1. Review advertisements"
		echo "2. Notify course coordinator of placement success"
		echo
		processMenuChoice
	elif [[ "$AccountType" = "coordinator" ]]; then
		echo "1. Review advertisements"
		echo "2. View current status of students’ internship applications"
		echo "3. Approve student internship placements"
		echo "4. Approve User"
		echo
		processMenuChoice
	elif [[ "$AccountType" = "academic" ]]; then
		echo "1. Submit advertisement"
		echo "2. View submitted advertisements"
		echo
		processMenuChoice
	elif [[ "$AccountType" = "organisation" ]]; then
		echo "1. Submit advertisement"
		echo "2. View submitted advertisements"
		echo
		processMenuChoice
	else quit=1
	fi
}

function processMenuChoice() {
	read choice #get user choice

	while [ -z "$choice" ]; #keep asking for choice if empty string entered
	do
		echo "No choice entered"
		echo -n "Enter choice and press enter: "
		read choice
	done

	if [[ "$choice" = "q" ]]; then
		quit=1
	elif [[ "$AccountType" = "student" && "$choice" -eq 1 ]]; then
		while read line           
		do           
			re="^([^,]+), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*)$"
			[[ "$line" =~ $re ]] && ID="${BASH_REMATCH[1]}" && Owner="${BASH_REMATCH[2]}" && Duration="${BASH_REMATCH[3]}" && Payment="${BASH_REMATCH[4]}" && SECompliant="${BASH_REMATCH[5]}" && Positions="${BASH_REMATCH[6]}" && Info="${BASH_REMATCH[7]}" && Visible="${BASH_REMATCH[8]}" && Expires="${BASH_REMATCH[9]}"
			if [[ "$Visible" = "true" ]]; then
				echo -e "$Owner: $Info\nDuration: $Duration; Payment: $Payment; SE Compliant: $SECompliant; Positions: $Positions; Expires: $Expires\n"
			fi
		done <.placement.csv
	elif [[ "$AccountType" = "student" && "$choice" -eq 2 ]]; then
		echo "choice 2" 
		processPlacement
	elif [[ "$AccountType" = "coordinator" && "$choice" -eq 1 ]]; then
		while read line           
		do           
			re="^([^,]+), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*)$"
			[[ "$line" =~ $re ]] && ID="${BASH_REMATCH[1]}" && Owner="${BASH_REMATCH[2]}" && Duration="${BASH_REMATCH[3]}" && Payment="${BASH_REMATCH[4]}" && SECompliant="${BASH_REMATCH[5]}" && Positions="${BASH_REMATCH[6]}" && Info="${BASH_REMATCH[7]}" && Visible="${BASH_REMATCH[8]}" && Expires="${BASH_REMATCH[9]}"
			echo -e "$Owner: $Info\nDuration: $Duration; Payment: $Payment; SE Compliant: $SECompliant; Positions: $Positions; Expires: $Expires\n"
		done <.placement.csv
	elif [[ "$AccountType" = "coordinator" && "$choice" -eq 2 ]]; then
		while read line           
		do           
			re="^([^,]+), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*)$"
			[[ "$line" =~ $re ]] && ID="${BASH_REMATCH[1]}" && Owner="${BASH_REMATCH[2]}" && Duration="${BASH_REMATCH[3]}" && Payment="${BASH_REMATCH[4]}" && SECompliant="${BASH_REMATCH[5]}" && Positions="${BASH_REMATCH[6]}" && Info="${BASH_REMATCH[7]}" && Visible="${BASH_REMATCH[8]}" && Expires="${BASH_REMATCH[9]}"
			echo -e "$Owner: $Info\nDuration: $Duration; Payment: $Payment; SE Compliant: $SECompliant; Positions: $Positions; Expires: $Expires\n"
		done <.placement.csv
	elif [[ "$AccountType" = "coordinator" && "$choice" -eq 3 ]]; then
		approvePlacement
	elif [[ "$AccountType" = "coordinator" && "$choice" -eq 4 ]]; then
		echo "choice 4"
	elif [[ "$AccountType" = "academic" && "$choice" -eq 1 ]]; then
		echo "choice 1"
	elif [[ "$AccountType" = "academic" && "$choice" -eq 2 ]]; then
		echo "choice 2"
	elif [[ "$AccountType" = "organisation" && "$choice" -eq 1 ]]; then
		echo "choice 1"
	elif [[ "$AccountType" = "organisation" && "$choice" -eq 2 ]]; then
		echo "choice 2"	
	fi
	echo "Enter to continue"
	read cont

}

function approvePlacement(){

echo -e "ApplicationId; Firstname; Surname; (StudentType; Year;) Email; Company; PlacementInfo;\nDuration(weeks); Payment(£); SE Compliant; Positions; Expires;\n"

	while read line           
		do           
			re="^([^,]+), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*)$"
			[[ "$line" =~ $re ]] && pUsername="${BASH_REMATCH[1]}" && pFirstName="${BASH_REMATCH[2]}" && pSurname="${BASH_REMATCH[3]}" && pEmail="${BASH_REMATCH[4]}" && pStudentType="${BASH_REMATCH[5]}" && pYear="${BASH_REMATCH[6]}" && pApproved="${BASH_REMATCH[7]}" && placementID="${BASH_REMATCH[8]}" && pOwner="${BASH_REMATCH[9]}" && pDuration="${BASH_REMATCH[10]}" && pPayment="${BASH_REMATCH[11]}" && pSECompliant="${BASH_REMATCH[12]}" && pPositions="${BASH_REMATCH[13]}" && pInfo="${BASH_REMATCH[14]}" && pVisible="${BASH_REMATCH[15]}" && pExpires="${BASH_REMATCH[16]}"
			echo -e "$pUsername-$placementID; $pFirstName $pSurname ($pStudentType $pYear) $pEmail $pOwner: $pInfo\nDuration: $pDuration; Payment: $pPayment; SE Compliant: $pSECompliant; Positions: $pPositions; Expires: $pExpires\n"
	done <.studentPlacement.csv


	echo -e "\nPlease enter the ID of the placement you want to process. q to exit:"

   #get user choices	
	read -d '-' choice1
	read choice2

	while [[ -z "$choice1" || -z "$choice2" ]]; #keep asking for choice if empty string entered
	do
		echo "Invalid id detected!"
		echo -en "Please enter an id of form \"StudentId-PlacementId\"."
		read -d '-' choice1
		read choice2
	done
	
	
	echo -e "\nEnter number of action for the following placement:\n$placement\n"
	echo "1. approve"
	echo "2. reject"
	read choice
	
	while [[ -z "$choice" ]]  #i can't get this shit to work :( || $choice=~"1\|\2\|q ]]"; #keep asking for choice if invalid string entered
	do
		echo "Invalid choice entered"
		echo -n "Enter a valid choice and press enter: "
		read choice
	done

	if [[ "$choice" = "q" ]]; then
		cont=0
	elif [[ "$choice" -eq 1 ]]; then
		choice="approved"
	else
		choice="rejected"
	fi
	
	cat < .studentPlacement.csv > .studentPlacement2.csv
	
	
	lineCounter=0
	
	while read line           
		do        
			lineCounter=$((lineCounter+1))
			re="^([^,]+), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*)$"
			[[ "$line" =~ $re ]] && pUsername="${BASH_REMATCH[1]}" && pFirstName="${BASH_REMATCH[2]}" && pSurname="${BASH_REMATCH[3]}" && pEmail="${BASH_REMATCH[4]}" && pStudentType="${BASH_REMATCH[5]}" && pYear="${BASH_REMATCH[6]}" && pApproved="${BASH_REMATCH[7]}" && placementID="${BASH_REMATCH[8]}" && pOwner="${BASH_REMATCH[9]}" && pDuration="${BASH_REMATCH[10]}" && pPayment="${BASH_REMATCH[11]}" && pSECompliant="${BASH_REMATCH[12]}" && pPositions="${BASH_REMATCH[13]}" && pInfo="${BASH_REMATCH[14]}" && pVisible="${BASH_REMATCH[15]}" && pExpires="${BASH_REMATCH[16]}"
			if [[ $pUsername = $choice1 && $placementID = $choice2 ]] ; then 
				
				
				
			#add a comment field as well
			
				replaceLine="$pUsername, $pFirstName, $pSurname, $pEmail, $pStudentType, $pYear, $choice, $pOwner, $pDuration, $pPayment, $pSECompliant, $pPositions, $pInfo, $pVisible, $pExpires"
				echo -e "$replaceLine\n$lineCounter\n"
				cat < .studentPlacement.csv >> .studentPlacement.csv
				#cat .studentPlacement.csv | sed '$lineCounters/.*/$replaceLine/' #> .studentPlacement.csv
				break
			fi
			
	done <.studentPlacement.csv
	if [[ $pUsername != $choice1 || $placementID != $choice2 ]] ; then
		echo "Invalid id detected!"
		approvePlacement; fi
	
	
}

function processPlacement() {
	echo -e "\nPlease choose an option from the menu below by entering the appropriate number and pressing enter. q to exit:"

	echo "1. The placement was found using the University of Glasgow Internship Management System"
	echo "2. The placement was found externally"
	echo
	read choice #get user choice

	while [ -z "$choice" ]; #keep asking for choice if empty string entered
	do
		echo "No choice entered"
		echo -n "Enter choice and press enter: "
		read choice
	done

	if [[ "$choice" = "q" ]]; then
		cont=0
	elif [[ "$choice" -eq 1 ]]; then
	echo "Select the correct position by number"
		while read line           
		do           
			re="^([^,]+), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*)$"
			[[ "$line" =~ $re ]] && ID="${BASH_REMATCH[1]}" && Owner="${BASH_REMATCH[2]}" && Duration="${BASH_REMATCH[3]}" && Payment="${BASH_REMATCH[4]}" && SECompliant="${BASH_REMATCH[5]}" && Positions="${BASH_REMATCH[6]}" && Info="${BASH_REMATCH[7]}" && Visible="${BASH_REMATCH[8]}" && Expires="${BASH_REMATCH[9]}"
			if [[ "$Visible" = "true" ]]; then
				echo -e "$ID; SE Compliant: $SECompliant; - $Owner: $Info\n"
			fi
		done <.placement.csv
		read choice
		while read line           
		do           
			re="^([^,]+), (.*), (.*), (.*), (.*), (.*), (.*), (.*), (.*)$"
			[[ "$line" =~ $re ]] && ID="${BASH_REMATCH[1]}" && Owner="${BASH_REMATCH[2]}" && Duration="${BASH_REMATCH[3]}" && Payment="${BASH_REMATCH[4]}" && SECompliant="${BASH_REMATCH[5]}" && Positions="${BASH_REMATCH[6]}" && Info="${BASH_REMATCH[7]}" && Visible="${BASH_REMATCH[8]}" && Expires="${BASH_REMATCH[9]}"
			if [[ "$Visible" = "true" && "$ID" = "$choice" ]]; then
				echo "$Username, $FirstName, $LastName, $Email, $StudentType, $StudentYear, false, $line" >> .studentPlacement.csv
				break
			fi
		done <.placement.csv
		echo "Thank you. Your response has been saved and is awaiting approval from the course coordinator. You will be contacted by email in due course."
		
		
	elif [[ "$choice" -eq 2 ]]; then
		echo "Enter Placement in form Owner, Duration, Payment, SECompliant, Positions, Info, Visible, Expires"
		read placement
		echo $placement $username >> .studentPlacement.csv
		echo "Thank you. Your response has been saved and is awaiting approval from the course coordinator. You will be contacted by email in due course."
	fi
}

function newAccount() {
	echo -n "Are You a student? Academic? Or Organisation?(s/a/o): "
	read nAccType
	if [ "$nAccType" = "s" ]; then makeStudent
	elif [ "$nAccType" = "a" ]; then makeAcademic
	elif [ "$nAccType" = "o" ]; then makeOrganisation
	fi
	if [[ "$nAccType" = "s" && "$nAccType" = "a" && "$nAccType" = "o" ]]; then  echo -e "\nThank You. Your account needs to be verified before use. You will recieve an email when this Happens."; fi
}
function makeStudent() {
	echo "Wyat? $nAccType"
	echo -n "Enter Your GUID (Matric + first letter of surname). This will be your Username: "
	read userName
	p1="a"
	password="b"
	while [ "$p1" != "$password" ] 
	do
		echo -n "Enter Password: "
		read -s p1
		echo
		echo -n "Confirm Password: "
		read -s password
		echo
		if [ "$p1" != "$password" ]; then echo "Passwords Do Not Match"; fi
	done
	echo -n "Enter Email: "
	read email
	echo -n "Enter First Name: "
	read fName
	echo -n "Enter Surame: "
	read sName
	echo -n "Enter Course Type (SE/ESE/CS/other): "
	read sType
	echo -n "Enter year of study (1/2/3/4/5/PG): "
	read sYear
	echo "Confirm Details (y/n)-"
	echo -n "$userName, $email, $fName, $sName, $sType, $sYear"
	read conf
	if [ $conf = "n" ]; then makeStudent
	elif [ $conf != $"y" ]; then echo "Error"
	else echo "$userName, $password, $email, false, student, $fName, $sName, $sType, $sYear, null" >> .users.csv
	fi
}
function makeAcademic() {
	echo -n "Enter Your University Username: "
	read userName
	p1="a"
	password="b"
	while [ "$p1" != "$password" ] 
	do
		echo -n "Enter Password: "
		read -s p1
		echo
		echo -n "Confirm Password: "
		read -s password
		echo
		if [ "$p1" != "$password" ]; then echo "Passwords Do Not Match"; fi
	done
	echo -n "Enter Email: "
	read email
	echo -n "Enter First Name: "
	read fName
	echo -n "Enter Surame: "
	read sName
	echo "Confirm Details (y/n)-"
	echo -n "$userName, $email, $fName, $sName"
	read conf
	if [ $conf = "n" ]; then makeAcademic
	elif [ $conf != $"y" ]; then echo "Error"
	else echo "$userName, $password, $email, false, accademic, $fName, $sName, null, null, null" >> .users.csv
	fi
}
function makeOrganisation() {
	echo -n "Enter a username (No Spaces or comma's): "
	read userName
	p1="a"
	password="b"
	while [ "$p1" != "$password" ] 
	do
		echo -n "Enter Password: "
		read -s p1
		echo
		echo -n "Confirm Password: "
		read -s password
		echo
		if [ "$p1" != "$password" ]; then echo "Passwords Do Not Match"; fi
	done
	echo -n "Enter Email: "
	read email
	echo -n "Enter Organisation Name: "
	read fName
	echo -n "Enter a description of your Company's core area of Business (Max Three Words, No Commas): "
	read oType
	echo "Confirm Details (y/n)-"
	echo -n "$userName, $email, $fName, $oType"
	read conf
	if [ $conf = "n" ]; then makeOrganisation
	elif [ $conf != $"y" ]; then echo "Error"
	else echo "$userName, $password, $email, false, organisation, $fName, , null, null, $oType" >> .users.csv
	fi
}


# START MAIN PROGRAM #
echo -e "\nWelcome to the University of Glasgow Internship Management System"

while [[ ! $quit -eq 1 ]];
do
	echo -en "\nDo You Have a username?(y/n/q): "
	read continue
	echo
	if [ "$continue" = "y" ]; then
		login
		while [[ ! $quit -eq 1 ]];
		do 
			menu
		done
	elif [ "$continue" = "n" ]; then newAccount
	else quit=1
	fi
done



